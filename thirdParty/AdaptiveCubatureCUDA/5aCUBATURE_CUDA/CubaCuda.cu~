#include "CubaCuda.h"
//-------------------------Thurst head-------------------------//
#include <thrust/host_vector.h>
#include <thrust/device_vector.h>
#include <thrust/generate.h>
#include <thrust/reduce.h>
#include <thrust/functional.h>
#include <thrust/iterator/counting_iterator.h>
#include <thrust/device_ptr.h>
#include <thrust/device_malloc.h>
#include <thrust/device_free.h>
//-------------------------Thurst head-------------------------//
#include "Heap.h"


#include "func.cu"

#define BLOCK_SIZE 64


unsigned ls0(unsigned n)
{
#if defined(__GNUC__) && \
    ((__GNUC__ == 3 && __GNUC_MINOR__ >= 4) || __GNUC__ > 3)
     return __builtin_ctz(~n); /* gcc builtin for version >= 3.4 */
#else
      unsigned bits[256] = {
	  0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4,
	  0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5,
	  0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4,
	  0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6,
	  0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4,
	  0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5,
	  0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4,
	  0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 7,
	  0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4,
	  0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5,
	  0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4,
	  0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 6,
	  0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4,
	  0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 5,
	  0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 4,
	  0, 1, 0, 2, 0, 1, 0, 3, 0, 1, 0, 2, 0, 1, 0, 8,
     };
     unsigned bit = 0;
     while ((n & 0xff) == 0xff) {
	  n >>= 8;
	  bit += 8;
     }
     return bit + bits[n & 0xff];
#endif
}


// Calculate with 2^n pts//
void evalR_Rfs(int dim,double *pts,  double *p, const double *c, const double *r)
{
     unsigned i;
     unsigned signs = 0; /* 0/1 bit = +/- for corresponding element of r[] */

     /* We start with the point where r is ADDed in every coordinate
        (this implies signs=0). */
     for (i = 0; i < dim; ++i)
	  p[i] = c[i] + r[i];

     /* Loop through the points in Gray-code ordering */
     for (i = 0;; ++i) {
	  unsigned mask, d;

	  memcpy(pts, p, sizeof(double) * dim); pts += dim;

	  d = ls0(i);	/* which coordinate to flip */
	  if (d >= dim)
	       break;

	  /* flip the d-th bit and add/subtract r[d] */
	  mask = 1U << d;
	  signs ^= mask;
	  p[d] = (signs & mask) ? c[d] - r[d] : c[d] + r[d];
     }


}

// Evaluate both beta

void evalRR0_0fs(int dim,double *pts, double *p, const double *c, const double *r)
{
     unsigned i, j;
     
     for (i = 0; i < dim - 1; ++i) {
	  p[i] = c[i] - r[i];
	  for (j = i + 1; j < dim; ++j) {
	       p[j] = c[j] - r[j];
	       memcpy(pts, p, sizeof(double) * dim); pts += dim;
	       p[i] = c[i] + r[i];
	       memcpy(pts, p, sizeof(double) * dim); pts += dim;
	       p[j] = c[j] + r[j];
	       memcpy(pts, p, sizeof(double) * dim); pts += dim;
	       p[i] = c[i] - r[i];
	       memcpy(pts, p, sizeof(double) * dim); pts += dim;

	       p[j] = c[j];	/* Done with j -> Restore p[j] */
	  }
	  p[i] = c[i];		/* Done with i -> Restore p[i] */
     }

}

//Evaluate points in the center, in (lambda2,0,...,0) and
//	     (lambda3=lambda4, 0,...,0).  

void evalR0_0fs4d(int dim,double *pts, double *p, const double *c,
			 const double *r1, const double *r2)
{
     unsigned i;
    

     for (i = 0; i < dim; i++) {
	  p[i] = c[i] - r1[i];
	  memcpy(pts, p, sizeof(double) * dim); pts += dim;

	  p[i] = c[i] + r1[i];
	  memcpy(pts, p, sizeof(double) * dim); pts += dim;

	  p[i] = c[i];
     }
   
     for (i = 0; i < dim; i++) {
	  p[i] = c[i] - r2[i];
	  memcpy(pts, p, sizeof(double) * dim); pts += dim;

	  p[i] = c[i] + r2[i];
	  memcpy(pts, p, sizeof(double) * dim); pts += dim;

	  p[i] = c[i];
     }


}



void points(int dim,double *pts1,double *pts2,double *pts3)
{

 
 double *p= new double [dim];
 double *c= new double [dim];


 // Aux variables;

 double *al= new double [dim];
 double *be= new double [dim];
 double *ga= new double  [dim];
  


 for(int i=0;i<dim;i++)
{
    al[i]=alpha;
    be[i]=beta;
    ga[i]=gammas;
    c[i]=0.0;
    p[i]=0.0;
} 


 evalRR0_0fs(dim,pts1,p,c,be);
     

 evalR0_0fs4d(dim,pts2,p,c,al,be);


 evalR_Rfs(dim,pts3,p,c,ga); 

 delete [] p;
 delete [] c; 
 delete [] al;
 delete [] be;
 delete [] ga;
 

}

// Function Declaration//---------------------//

#define real(x) ((double)(x))
#define to_int(n) ((int)(n))

static int isqr(int x)
{
     return x * x;
}

void weight(int dim, double *W , double *W1)
{
 // 7th order
  W[0]=(real(12824 - 9120 * to_int(dim) + 400 * isqr(to_int(dim)))/ real(19683));
  W[1]=200.0/19683.0;
  W[2]=980.0/6561.0;
  W[3]=real(1820 - 400* to_int(dim)) / real(19683);
  W[4]= real(6859) / real(19683) / real(1U << dim);
  
 // 5th order
  W1[0]= (real(729 - 950 * to_int(dim) + 50 * isqr(to_int(dim)))/real(729));
  W1[1]=25.0/729.0;
  W1[2]=245.0/486.0;
  W1[3]=real(265 - 100 * to_int(dim)) / real(1458);  
}

void Region::Regions(int dim, double *dx, double *d)
{

 for(int i=0;i<dim;i++)
      {
         d[i]=(a[i]+b[i])/2.0;
         dx[i]=(b[i]-a[i])/2.0;
       }
 

}

/*=============================================CUBATURE CALCULATION========================================*/  
__global__ void cuba(int dim, int N,double Vol, DataD datD,functor f)
{


int j;
int l=0;


double sum[5];
memset(sum,0,5*sizeof(double));

double fap,fan,fbp,fbn;

int index;


int id = blockDim.x * blockIdx.x + threadIdx.x;
if ( id<N )
{

  sum[0]=f(datD.d_x0,index,id);

for(int i=0;i<(2*dim*(dim-1));i++)
   {

      sum[1]+=f(datD.d_x1+dim*i,index,id);
   }

     for(int i=0;i<2*dim-1;i+=2)
   {
    
     fan=f(datD.d_x2+dim*i,index,id);
    
     fap=f(datD.d_x2+dim*(i+1),index,id);
 
     sum[2]+=fap+fan;        

     j=2*dim+i;
  
     fbn=f(datD.d_x2+dim*j,index,id);  

     fbp=f(datD.d_x2+dim*(j+1),index,id); 

     sum[3]+=fbp+fbn;

     datD.d_diff[l*N+id]=fabs((fap+fan)-2.0*sum[0] - (alpha*alpha)/(beta*beta)*( (fbp+fbn)-2.0*sum[0]));

     l++;
     
     
   }


    for(int i=0;i<powf(2,dim);i++)
   {
     sum[4]+=f(datD.d_x3+dim*i,index,id);
   }


   datD.d_S7[id]=Vol*(datD.d_W[0]*sum[0]+datD.d_W[1]*sum[1]+datD.d_W[2]*sum[2]+datD.d_W[3]*sum[3]+datD.d_W[4]*sum[4]);

   datD.d_S5[id]=Vol*(datD.d_W1[0]*sum[0]+datD.d_W1[1]*sum[1]+datD.d_W1[2]*sum[2]+datD.d_W1[3]*sum[3]);

   datD.d_ERROR[id]=datD.d_S7[id]-datD.d_S5[id];

		   
}    


}




void Region::Cubature(int dim,int dimf,double *dx,double *d,double *pts1,double *pts2, double *pts3,functor f, void *par, double *S5, double *W, double *W1,int my_rank,int proc, const Data& dat)
{

  double Vol=1.0;
  size_t sizef = sizeof(double); 


   double diffF[dim];
  
   ErrorMax=0.0;

memset(dat.x0,0,dim*sizeof(double));


  for(int i=0;i<dim;i++)
      {
      Vol*=2.0*dx[i];
      dat.x0[i]=dat.x0[i]*dx[i]+d[i];
      }
 



for(int i=0;i<2*dim*(dim-1);i++)
   {  
      
 for(int j=0;j<dim;j++)
   { 
       dat.x1[i*dim+j]=pts1[i*dim+j]*dx[j]+d[j];  } 
   }


for(int i=0;i<4*dim;i++)
   { 
        
 for(int j=0;j<dim;j++)
   { 
     dat.x2[i*dim+j]=pts2[i*dim+j]*dx[j]+d[j];}
   }


for(int i=0;i<(1U << dim);i++)
   {  
 for(int j=0;j<dim;j++)
   {
     dat.x3[i*dim+j]=pts3[i*dim+j]*dx[j]+d[j];
    }
   }


 // Points calculation

 memset(diffF,0,dim*sizeof(double));


  // GPU CODE IMPLEMETATION
  DataD datD;
   

cudaMalloc((void**)&datD.d_S5,sizef*dimf);
cudaMalloc((void**)&datD.d_S7,sizef*dimf);
cudaMalloc((void**)&datD.d_ERROR,sizef*dimf);
cudaMalloc((void**)&datD.d_diff,sizef*dimf*dim);
// Allocate vectors in device memory
cudaMalloc((void**)&datD.d_x0, sizef*dim);
cudaMalloc((void**)&datD.d_x1, sizef*dimk(dim));
cudaMalloc((void**)&datD.d_x2, sizef*diml(dim));
cudaMalloc((void**)&datD.d_x3,sizef*dimm(dim));
// 
cudaMalloc((void**)&datD.d_W,sizef*5);
cudaMalloc((void**)&datD.d_W1,sizef*4);
// 
  // Dynamic function

 //  cutilSafeCall(cudaMalloc((void**)&func, sizef));   

 // Threads and Block setting
 
  int threadsPerBlock =BLOCK_SIZE;
  int blocksPerGrid = (dimf + threadsPerBlock - 1) / threadsPerBlock;
  



cudaMemcpy(datD.d_x0, dat.x0, sizef*dim, cudaMemcpyHostToDevice);
cudaMemcpy(datD.d_x1, dat.x1, sizef*dimk(dim), cudaMemcpyHostToDevice);
cudaMemcpy(datD.d_x2, dat.x2, sizef*diml(dim), cudaMemcpyHostToDevice);
cudaMemcpy(datD.d_x3, dat.x3, sizef*dimm(dim), cudaMemcpyHostToDevice);

cudaMemcpy(datD.d_W, W, sizef*5, cudaMemcpyHostToDevice);
cudaMemcpy(datD.d_W1, W1, sizef*4, cudaMemcpyHostToDevice);

// Quadrature initialization

   cuba<<<blocksPerGrid, threadsPerBlock>>>(dim,dimf,Vol,datD,f);

// Copy result from device memory to host memory
    // Result in host memory
  cudaMemcpy(dat.S7, datD.d_S7, dimf*sizef, cudaMemcpyDeviceToHost);
  cudaMemcpy(dat.ERROR, datD.d_ERROR, dimf*sizef, cudaMemcpyDeviceToHost);

  
    double init=0.0;
    thrust::plus<double> binary_op;
// Copy result from device memory to host memory
    // Result in host memory
    thrust::device_ptr<double> dev_ptr(datD.d_diff);
    
    
    for(int i=0; i<dim;i++) diffF[i] = thrust::reduce(dev_ptr+i*dimf, dev_ptr+(i+1)*dimf, init, binary_op);
    
   // cout<< diffF[0]<< endl;

  cudaFree(datD.d_S7);
  cudaFree(datD.d_S5);
  cudaFree(datD.d_W);
  cudaFree(datD.d_W1);
  cudaFree(datD.d_ERROR);
  

  cudaFree(datD.d_x0);
  cudaFree(datD.d_x1);
  cudaFree(datD.d_x2);
  cudaFree(datD.d_x3);
  cudaFree(datD.d_diff);
// Stream


 double  maxdiff=0.0;
   int dimDiffMax=0; 
  
for(int index=0;index<dimf;index++)
{
   S[index]=dat.S7[index];
   Errorabs[index]=dat.ERROR[index];
   if (abs(Errorabs[index]) > ErrorMax) ErrorMax = abs(Errorabs[index]);
}



 for (int i = 0; i < dim; i++)  {
	       if (diffF[i] > maxdiff) {
		    maxdiff = diffF[i];
		    dimDiffMax = i;
	       }
        }
	  split=dimDiffMax;
  
  
}



/*=============================================QUADRATURE CALCULATION========================================*/  
__global__ void quad(int dim, int N, double *d_dx, double *d_d,functor f, DataDU datD)
{

int index=0;
double Sk=0.0;
double Sg=0.0;
double g;
double x[16];

/*=============================================GAUSS-KRONROD========================================*/  
double wk[16]={0.209482141084728,0.190350578064785,0.190350578064785,0.140653259715525,0.140653259715525,0.063092092629979,0.063092092629979,0.204432940075298,0.204432940075298,0.169004726639267,0.169004726639267,0.104790010322250,0.104790010322250,0.022935322010529,0.022935322010529,0.0};
double wg[16]={0.417959183673469,0.381830050505119,0.381830050505119,0.279705391489277,0.279705391489277,0.129484966168870,0.129484966168870,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0};
double e[16]={0.000000,0.405845151377397,-0.405845151377397,0.741531185599394,-0.741531185599394,0.949107912342759,-0.949107912342759,0.207784955007898,-0.207784955007898,0.586087235467691,-0.586087235467691,0.864864423359769,-0.864864423359769,0.991455371120813,-0.991455371120813,0.0};

/*=============================================QUADRATURE CALCULATION========================================*/  
unsigned int id = blockDim.x * blockIdx.x + threadIdx.x;

 if (id < N)
 {
  
   for(int i=0;i<16;i++)    
    {
      x[i]=(d_dx[0]*e[i]+d_d[0]);  
      g= f(&x[i],index,id);   
      Sk+=d_dx[0]*wk[i]*g;
      Sg+=d_dx[0]*wg[i]*g;    
    }
   
   datD.d_S7[id]=Sk;
   datD.d_ERROR[id]=Sk-Sg;
   
   }

 }
 
void Region::Quadrature(int dim,int dimf, double *dx, double *d, functor f,void * par,int my_rank,int proc,const Data& dat) 
{

   size_t sizef = sizeof(double); 
   ErrorMax=0.0;
  
     

  // GPU CODE IMPLEMETATION
  DataDU datD;
  double  *d_dx;
  double  *d_d;
   
cudaMalloc((void**)&datD.d_S7,sizef*dimf);
cudaMalloc((void**)&datD.d_ERROR,sizef*dimf);
cudaMalloc((void**)&d_dx,sizef);
cudaMalloc((void**)&d_d,sizef);
// 


  int threadsPerBlock =BLOCK_SIZE;
  int blocksPerGrid = (dimf + threadsPerBlock - 1) / threadsPerBlock;
  
cudaMemcpy(d_dx, dx, sizef, cudaMemcpyHostToDevice);
cudaMemcpy(d_d, d, sizef, cudaMemcpyHostToDevice);


// Quadrature initialization

   quad<<<blocksPerGrid, threadsPerBlock>>>(dim,dimf,d_dx,d_d,f,datD);

// Copy result from device memory to host memory
    // Result in host memory
  cudaMemcpy(dat.S7, datD.d_S7, dimf*sizef, cudaMemcpyDeviceToHost);
  cudaMemcpy(dat.ERROR, datD.d_ERROR, dimf*sizef, cudaMemcpyDeviceToHost);

    
   // cout<< diffF[0]<< endl;

  cudaFree(datD.d_S7);
  cudaFree(datD.d_ERROR);
  
  cudaFree(d_dx);
  cudaFree(d_d);
  
  
for(int index=0;index<dimf;index++)
{
   S[index]=dat.S7[index];
   Errorabs[index]=dat.ERROR[index];
   if (abs(Errorabs[index]) > ErrorMax) ErrorMax = abs(Errorabs[index]);
}

split=0;
  
  
}


/*=============================================METHOD SELECTION========================================*/    


void Region::CubaCuda(int dim,int dimf,functor f, void* par,double *pts1,double *pts2,double *pts3,double *W, double *W1,int my_rank,int proc, const Data& dat)
{


      double *S5=new double[dimf];

      double *d=new double[dim];
      double *dx=new double[dim];
      
      Regions(dim,dx,d);
      
      if(dim > 1)
       { 
         Cubature(dim,dimf,dx,d,pts1,pts2,pts3,f,par,S5,W,W1,my_rank,proc,dat);
       } else{
         Quadrature(dim,dimf, dx, d,f,par,my_rank,proc,dat);           
         }

      delete [] S5;
      delete [] d;
      delete [] dx;
}

/*=============================================ADAPTIVE PROCEDURE========================================*/    


int adaptCuba(int dim,int dimf, functor f, void * par, const UserInput& User, int& L)
{


clock_t start_time, end_time;
int my_rank=0;
int proc=1;
double totaltime=0;
start_time = clock();
L=0;

 double *W;
 cudaHostAlloc( (void**)&W , 5*sizeof(W) ,cudaHostAllocDefault);
 double *W1;
 cudaHostAlloc( (void**)&W1 , 5*sizeof(W1) ,cudaHostAllocDefault);
 

double dy;
int split;
int itmin=5;
int it=User.Nit/proc;
int m;	

Data dat;

//---------------PINNED MEMORY-------------//
   cudaHostAlloc( (void**)&dat.x0 , dim*sizeof(double) ,cudaHostAllocDefault);
   cudaHostAlloc( (void**)&dat.x1 , dimk(dim)*sizeof(double) ,cudaHostAllocDefault);
   cudaHostAlloc( (void**)&dat.x2 , diml(dim)*sizeof(double) ,cudaHostAllocDefault);
   cudaHostAlloc( (void**)&dat.x3 , dimm(dim)*sizeof(double) ,cudaHostAllocDefault);
   cudaHostAlloc( (void**)&dat.diff , dimf*dim*sizeof(double) ,cudaHostAllocDefault);
   cudaHostAlloc( (void**)&dat.ERROR , dimf*sizeof(double) ,cudaHostAllocDefault);
   cudaHostAlloc( (void**)&dat.S7 , dimf*sizeof(double) ,cudaHostAllocDefault);
//---------------PINNED MEMORY-------------//  


//points
double *pts1=new double [dimk(dim)];
double *pts2=new double [diml(dim)];
double *pts3=new double [dimm(dim)];

//Auxiliar
double *TOLf=new double [dimf];

memset(User.ErrorF,0,dimf*sizeof(double));
memset(TOLf,0,dimf*sizeof(double));
memset(User.St,0,dimf*sizeof(double));

// MPI DATA;
  Region R[2];
// Heap Data  
  Heap pos;

//Initialization of regions;

 R[0].Declare(dim,dimf);
 R[1].Declare(dim,dimf);


for(int i=0;i<dim;i++) 
  {
      R[0].a[i]=User.xmin[i];
      R[0].b[i]=User.xmax[i];
  }       

// int position = 0;
//Weight and Abscissas

points(dim,pts1,pts2,pts3);
weight(dim,W,W1);



//Calculate cubature

      R[0].CubaCuda(dim,dimf,f,par,pts1,pts2,pts3,W,W1,my_rank,proc,dat);
      pos.push(R[0]);




for(int i=0;i<dimf;i++)
  {
      User.St[i]=R[0].S[i];                    
      User.ErrorF[i]=R[0].Errorabs[i];  
  }
 


 do
{

  do
    {  


 R[0]=pos.pop();

for(int i=0;i<dimf;i++)
  {
     User.St[i]-=R[0].S[i];
     User.ErrorF[i]-=R[0].Errorabs[i]; 
   }



split=R[0].split;


dy=(R[0].b[split]-R[0].a[split])*0.5;


R[1].a=R[0].a;
R[1].b=R[0].b;

// N region     
    R[0].b[split]=R[0].a[split]+dy;
// N+1 region
    R[1].a[split]=R[0].b[split];
    R[1].b[split]=R[1].a[split]+dy; 
//



R[0].CubaCuda(dim,dimf,f,par,pts1,pts2,pts3,W,W1,my_rank,proc,dat);
R[1].CubaCuda(dim,dimf,f,par,pts1,pts2,pts3,W,W1,my_rank,proc,dat);


for(int i=0;i<dimf;i++)
  {
    User.St[i]+=R[0].S[i]+R[1].S[i];
    User.ErrorF[i]+=R[0].Errorabs[i]+R[1].Errorabs[i];
    TOLf[i]=max(User.TOL,User.TOLr*fabs(User.St[i]));
  }

pos.push(R[0]);
//
pos.push(R[1]);
//
L++;
//
}
   while(L<itmin);



for (m = 0; m < dimf && (abs(User.ErrorF[m]) <= TOLf[m]);m++); 
         {
	  if (m == dimf) {  	
	       break; 
           } 
         }



}
 while((L<it));


//Clean the memory
delete [] pts1;
delete [] pts2;
delete [] pts3;
delete [] TOLf;
//delete [] W;
cudaFreeHost(W);
//delete [] W1;
cudaFreeHost(W1);

//--------------- DELETE PINNED MEMORY-------------//  
 // delete [] x0;
  cudaFreeHost(dat.x0);
 // delete [] x1;
  cudaFreeHost(dat.x1);
 // delete [] x2;
  cudaFreeHost(dat.x2);
 //delete [] x3;
  cudaFreeHost(dat.x3);
 // delete [] diff;
  cudaFreeHost(dat.diff);
 // delete [] ERROR;
  cudaFreeHost(dat.ERROR);
  //
  cudaFreeHost(dat.S7);
//--------------- DELETE PINNED MEMORY-------------//  

end_time = clock();
totaltime+= (double) (end_time - start_time) / CLOCKS_PER_SEC ;
cout<< " Computational time = " <<  totaltime << "seconds "<< endl;  

for(int j=0;j<10;j++) {
  cout<< "Converged Integral Result "<< j <<"= "<< setprecision(10) << User.St[j] << endl;}

return my_rank; 


} 

